<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DatabaseWrapper.Core</name>
    </assembly>
    <members>
        <member name="T:DatabaseWrapper.Core.Column">
            <summary>
            Database table column.
            </summary>
        </member>
        <member name="F:DatabaseWrapper.Core.Column.Name">
            <summary>
            The name of the column.
            </summary>
        </member>
        <member name="F:DatabaseWrapper.Core.Column.PrimaryKey">
            <summary>
            Whether or not the column is the table's primary key.
            </summary>
        </member>
        <member name="F:DatabaseWrapper.Core.Column.Type">
            <summary>
            The data type of the column.
            </summary>
        </member>
        <member name="F:DatabaseWrapper.Core.Column.MaxLength">
            <summary>
            The maximum character length of the data contained within the column.
            </summary>
        </member>
        <member name="F:DatabaseWrapper.Core.Column.Precision">
            <summary>
            For precision, i.e. number of places after the decimal.
            </summary>
        </member>
        <member name="F:DatabaseWrapper.Core.Column.Nullable">
            <summary>
            Whether or not the column can contain NULL.
            </summary>
        </member>
        <member name="M:DatabaseWrapper.Core.Column.#ctor">
            <summary>
            Instantiate the object.
            </summary>
        </member>
        <member name="M:DatabaseWrapper.Core.Column.#ctor(System.String,System.Boolean,DatabaseWrapper.Core.DataTypeEnum,System.Boolean)">
            <summary>
            Instantiate the object.
            </summary>
            <param name="name">Name of the column.</param>
            <param name="primaryKey">Indicate if this column is the primary key.</param>
            <param name="dt">DataType for the column.</param>
            <param name="nullable">Indicate if this column is nullable.</param>
        </member>
        <member name="M:DatabaseWrapper.Core.Column.#ctor(System.String,System.Boolean,DatabaseWrapper.Core.DataTypeEnum,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Instantiate the object.
            </summary>
            <param name="name">Name of the column.</param>
            <param name="primaryKey">Indicate if this column is the primary key.</param>
            <param name="dt">DataType for the column.</param>
            <param name="maxLen">Max length for the column.</param>
            <param name="precision">Precision for the column.</param>
            <param name="nullable">Indicate if this column is nullable.</param>
        </member>
        <member name="M:DatabaseWrapper.Core.Column.ToString">
            <summary>
            Produce a human-readable string of the object.
            </summary>
            <returns>String.</returns>
        </member>
        <member name="T:DatabaseWrapper.Core.DatabaseClientBase">
            <summary>
            Database client base.
            </summary>
        </member>
        <member name="F:DatabaseWrapper.Core.DatabaseClientBase.ConnectionString">
            <summary>
            The connection string used to connect to the database.
            </summary>
        </member>
        <member name="F:DatabaseWrapper.Core.DatabaseClientBase.TimestampFormat">
            <summary>
            Timestamp format.
            </summary>
        </member>
        <member name="F:DatabaseWrapper.Core.DatabaseClientBase.TimestampOffsetFormat">
            <summary>
            Timestamp format with offset.
            </summary>
        </member>
        <member name="F:DatabaseWrapper.Core.DatabaseClientBase.MaxStatementLength">
            <summary>
            Maximum supported statement length.
            </summary>
        </member>
        <member name="F:DatabaseWrapper.Core.DatabaseClientBase.Settings">
            <summary>
            Database settings.
            </summary>
        </member>
        <member name="F:DatabaseWrapper.Core.DatabaseClientBase.QueryEvent">
            <summary>
            Event to fire when a query is handled.
            </summary>
        </member>
        <member name="M:DatabaseWrapper.Core.DatabaseClientBase.ListTables">
            <summary>
            List all tables in the database.
            </summary>
            <returns>List of strings, each being a table name.</returns>
        </member>
        <member name="M:DatabaseWrapper.Core.DatabaseClientBase.ListTablesAsync(System.Threading.CancellationToken)">
            <summary>
            List all tables in the database.
            </summary>
            <param name="token">Cancellation token.</param>
            <returns>List of strings, each being a table name.</returns>
        </member>
        <member name="M:DatabaseWrapper.Core.DatabaseClientBase.TableExists(System.String)">
            <summary>
            Check if a table exists in the database.
            </summary>
            <param name="tableName">The name of the table.</param>
            <returns>True if exists.</returns>
        </member>
        <member name="M:DatabaseWrapper.Core.DatabaseClientBase.TableExistsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Check if a table exists in the database.
            </summary>
            <param name="tableName">The name of the table.</param>
            <param name="token">Cancellation token.</param>
            <returns>True if exists.</returns>
        </member>
        <member name="M:DatabaseWrapper.Core.DatabaseClientBase.DescribeTable(System.String)">
            <summary>
            Show the columns and column metadata from a specific table.
            </summary>
            <param name="tableName">The table to view.</param>
            <returns>A list of column objects.</returns>
        </member>
        <member name="M:DatabaseWrapper.Core.DatabaseClientBase.DescribeTableAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Show the columns and column metadata from a specific table.
            </summary>
            <param name="tableName">The table to view.</param>
            <param name="token">Cancellation token.</param>
            <returns>A list of column objects.</returns>
        </member>
        <member name="M:DatabaseWrapper.Core.DatabaseClientBase.DescribeDatabase">
            <summary>
            Describe each of the tables in the database.
            </summary>
            <returns>Dictionary where Key is table name, value is List of Column objects.</returns>
        </member>
        <member name="M:DatabaseWrapper.Core.DatabaseClientBase.DescribeDatabaseAsync(System.Threading.CancellationToken)">
            <summary>
            Describe each of the tables in the database.
            </summary>
            <param name="token">Cancellation token.</param>
            <returns>Dictionary where Key is table name, value is List of Column objects.</returns>
        </member>
        <member name="M:DatabaseWrapper.Core.DatabaseClientBase.CreateTable(System.String,System.Collections.Generic.List{DatabaseWrapper.Core.Column})">
            <summary>
            Create a table with a specified name.
            </summary>
            <param name="tableName">The name of the table.</param>
            <param name="columns">Columns.</param>
        </member>
        <member name="M:DatabaseWrapper.Core.DatabaseClientBase.CreateTableAsync(System.String,System.Collections.Generic.List{DatabaseWrapper.Core.Column},System.Threading.CancellationToken)">
            <summary>
            Create a table with a specified name.
            </summary>
            <param name="tableName">The name of the table.</param>
            <param name="token">Cancellation token.</param>
            <param name="columns">Columns.</param>
        </member>
        <member name="M:DatabaseWrapper.Core.DatabaseClientBase.DropTable(System.String)">
            <summary>
            Drop the specified table.  
            </summary>
            <param name="tableName">The table to drop.</param>
        </member>
        <member name="M:DatabaseWrapper.Core.DatabaseClientBase.DropTableAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Drop the specified table.  
            </summary>
            <param name="tableName">The table to drop.</param>
            <param name="token">Cancellation token.</param>
        </member>
        <member name="M:DatabaseWrapper.Core.DatabaseClientBase.GetPrimaryKeyColumn(System.String)">
            <summary>
            Retrieve the name of the primary key column from a specific table.
            </summary>
            <param name="tableName">The table of which you want the primary key.</param>
            <returns>A string containing the column name.</returns>
        </member>
        <member name="M:DatabaseWrapper.Core.DatabaseClientBase.GetColumnNames(System.String)">
            <summary>
            Retrieve a list of the names of columns from within a specific table.
            </summary>
            <param name="tableName">The table of which ou want to retrieve the list of columns.</param>
            <returns>A list of strings containing the column names.</returns>
        </member>
        <member name="M:DatabaseWrapper.Core.DatabaseClientBase.GetUniqueObjectById(System.String,System.String,System.Object)">
            <summary>
            Returns a DataTable containing at most one row with data from the specified table where the specified column contains the specified value.  Should only be used on key or unique fields.
            </summary>
            <param name="tableName">The table from which you wish to SELECT.</param>
            <param name="columnName">The column containing key or unique fields where a match is desired.</param>
            <param name="value">The value to match in the key or unique field column.  This should be an object that can be cast to a string value.</param>
            <returns>A DataTable containing at most one row.</returns>
        </member>
        <member name="M:DatabaseWrapper.Core.DatabaseClientBase.GetUniqueObjectByIdAsync(System.String,System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Returns a DataTable containing at most one row with data from the specified table where the specified column contains the specified value.  Should only be used on key or unique fields.
            </summary>
            <param name="tableName">The table from which you wish to SELECT.</param>
            <param name="columnName">The column containing key or unique fields where a match is desired.</param>
            <param name="value">The value to match in the key or unique field column.  This should be an object that can be cast to a string value.</param>
            <param name="token">Cancellation token.</param>
            <returns>A DataTable containing at most one row.</returns>
        </member>
        <member name="M:DatabaseWrapper.Core.DatabaseClientBase.Select(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.List{System.String},ExpressionTree.Expr)">
            <summary>
            Execute a SELECT query.
            </summary>
            <param name="tableName">The table from which you wish to SELECT.</param>
            <param name="indexStart">The starting index for retrieval.</param>
            <param name="maxResults">The maximum number of results to retrieve.</param>
            <param name="returnFields">The fields you wish to have returned.  Null returns all.</param>
            <param name="filter">The expression containing the SELECT filter (i.e. WHERE clause data).</param>
            <returns>A DataTable containing the results.</returns>
        </member>
        <member name="M:DatabaseWrapper.Core.DatabaseClientBase.SelectAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.List{System.String},ExpressionTree.Expr,System.Threading.CancellationToken)">
            <summary>
            Execute a SELECT query.
            </summary>
            <param name="tableName">The table from which you wish to SELECT.</param>
            <param name="indexStart">The starting index for retrieval.</param>
            <param name="maxResults">The maximum number of results to retrieve.</param>
            <param name="returnFields">The fields you wish to have returned.  Null returns all.</param>
            <param name="filter">The expression containing the SELECT filter (i.e. WHERE clause data).</param>
            <param name="token">Cancellation token.</param>
            <returns>A DataTable containing the results.</returns>
        </member>
        <member name="M:DatabaseWrapper.Core.DatabaseClientBase.Select(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.List{System.String},ExpressionTree.Expr,DatabaseWrapper.Core.ResultOrder[])">
            <summary>
            Execute a SELECT query.
            </summary>
            <param name="tableName">The table from which you wish to SELECT.</param>
            <param name="indexStart">The starting index for retrieval.</param>
            <param name="maxResults">The maximum number of results to retrieve.</param>
            <param name="returnFields">The fields you wish to have returned.  Null returns all.</param>
            <param name="filter">The expression containing the SELECT filter (i.e. WHERE clause data).</param>
            <param name="resultOrder">Specify on which columns and in which direction results should be ordered.</param>
            <returns>A DataTable containing the results.</returns>
        </member>
        <member name="M:DatabaseWrapper.Core.DatabaseClientBase.SelectAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.List{System.String},ExpressionTree.Expr,DatabaseWrapper.Core.ResultOrder[],System.Threading.CancellationToken)">
            <summary>
            Execute a SELECT query.
            </summary>
            <param name="tableName">The table from which you wish to SELECT.</param>
            <param name="indexStart">The starting index for retrieval.</param>
            <param name="maxResults">The maximum number of results to retrieve.</param>
            <param name="returnFields">The fields you wish to have returned.  Null returns all.</param>
            <param name="filter">The expression containing the SELECT filter (i.e. WHERE clause data).</param>
            <param name="resultOrder">Specify on which columns and in which direction results should be ordered.</param>
            <param name="token">Cancellation token.</param>
            <returns>A DataTable containing the results.</returns>
        </member>
        <member name="M:DatabaseWrapper.Core.DatabaseClientBase.Insert(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Execute an INSERT query.
            </summary>
            <param name="tableName">The table in which you wish to INSERT.</param>
            <param name="keyValuePairs">The key-value pairs for the row you wish to INSERT.</param>
            <returns>A DataTable containing the results.</returns>
        </member>
        <member name="M:DatabaseWrapper.Core.DatabaseClientBase.InsertAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            Execute an INSERT query.
            </summary>
            <param name="tableName">The table in which you wish to INSERT.</param>
            <param name="keyValuePairs">The key-value pairs for the row you wish to INSERT.</param>
            <param name="token">Cancellation token.</param>
            <returns>A DataTable containing the results.</returns>
        </member>
        <member name="M:DatabaseWrapper.Core.DatabaseClientBase.InsertMultiple(System.String,System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            Execute an INSERT query with multiple values within a transaction.
            </summary>
            <param name="tableName">The table in which you wish to INSERT.</param>
            <param name="keyValuePairList">List of dictionaries containing key-value pairs for the rows you wish to INSERT.</param>
        </member>
        <member name="M:DatabaseWrapper.Core.DatabaseClientBase.InsertMultipleAsync(System.String,System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}},System.Threading.CancellationToken)">
            <summary>
            Execute an INSERT query with multiple values within a transaction.
            </summary>
            <param name="tableName">The table in which you wish to INSERT.</param>
            <param name="keyValuePairList">List of dictionaries containing key-value pairs for the rows you wish to INSERT.</param>
            <param name="token">Cancellation token.</param>
        </member>
        <member name="M:DatabaseWrapper.Core.DatabaseClientBase.Update(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},ExpressionTree.Expr)">
            <summary>
            Execute an UPDATE query. 
            </summary>
            <param name="tableName">The table in which you wish to UPDATE.</param>
            <param name="keyValuePairs">The key-value pairs for the data you wish to UPDATE.</param>
            <param name="filter">The expression containing the UPDATE filter (i.e. WHERE clause data).</param> 
        </member>
        <member name="M:DatabaseWrapper.Core.DatabaseClientBase.UpdateAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},ExpressionTree.Expr,System.Threading.CancellationToken)">
            <summary>
            Execute an UPDATE query. 
            </summary>
            <param name="tableName">The table in which you wish to UPDATE.</param>
            <param name="keyValuePairs">The key-value pairs for the data you wish to UPDATE.</param>
            <param name="filter">The expression containing the UPDATE filter (i.e. WHERE clause data).</param> 
            <param name="token">Cancellation token.</param>
        </member>
        <member name="M:DatabaseWrapper.Core.DatabaseClientBase.Delete(System.String,ExpressionTree.Expr)">
            <summary>
            Execute a DELETE query.
            </summary>
            <param name="tableName">The table in which you wish to DELETE.</param>
            <param name="filter">The expression containing the DELETE filter (i.e. WHERE clause data).</param> 
        </member>
        <member name="M:DatabaseWrapper.Core.DatabaseClientBase.DeleteAsync(System.String,ExpressionTree.Expr,System.Threading.CancellationToken)">
            <summary>
            Execute a DELETE query.
            </summary>
            <param name="tableName">The table in which you wish to DELETE.</param>
            <param name="filter">The expression containing the DELETE filter (i.e. WHERE clause data).</param> 
            <param name="token">Cancellation token.</param>
        </member>
        <member name="M:DatabaseWrapper.Core.DatabaseClientBase.Truncate(System.String)">
            <summary>
            Empties a table completely.
            </summary>
            <param name="tableName">The table you wish to TRUNCATE.</param>
        </member>
        <member name="M:DatabaseWrapper.Core.DatabaseClientBase.TruncateAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Empties a table completely.
            </summary>
            <param name="tableName">The table you wish to TRUNCATE.</param>
            <param name="token">Cancellation token.</param>
        </member>
        <member name="M:DatabaseWrapper.Core.DatabaseClientBase.Query(System.ValueTuple{System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}})">
            <summary>
            Execute a query.
            </summary>
            <param name="queryAndParameters">A tuple of the aatabase query defined outside of the database client and query parameters.</param>
            <returns>A DataTable containing the results.</returns>
        </member>
        <member name="M:DatabaseWrapper.Core.DatabaseClientBase.Query(System.String)">
            <summary>
            Execute a query.
            </summary>
            <param name="query">Database query defined outside of the database client.</param>
            <returns>A DataTable containing the results.</returns>
        </member>
        <member name="M:DatabaseWrapper.Core.DatabaseClientBase.QueryAsync(System.ValueTuple{System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}},System.Threading.CancellationToken)">
            <summary>
            Execute a query.
            </summary>
            <param name="queryAndParameters">A tuple of the aatabase query defined outside of the database client and query parameters.</param>
            <param name="token">Cancellation token.</param>
            <returns>A DataTable containing the results.</returns>
        </member>
        <member name="M:DatabaseWrapper.Core.DatabaseClientBase.QueryAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Execute a query.
            </summary>
            <param name="query">Database query defined outside of the database client.</param>
            <param name="token">Cancellation token.</param>
            <returns>A DataTable containing the results.</returns>
        </member>
        <member name="M:DatabaseWrapper.Core.DatabaseClientBase.Exists(System.String,ExpressionTree.Expr)">
            <summary>
            Determine if records exist by filter.
            </summary>
            <param name="tableName">The name of the table.</param>
            <param name="filter">Expression.</param>
            <returns>True if records exist.</returns>
        </member>
        <member name="M:DatabaseWrapper.Core.DatabaseClientBase.ExistsAsync(System.String,ExpressionTree.Expr,System.Threading.CancellationToken)">
            <summary>
            Determine if records exist by filter.
            </summary>
            <param name="tableName">The name of the table.</param>
            <param name="filter">Expression.</param>
            <param name="token">Cancellation token.</param>
            <returns>True if records exist.</returns>
        </member>
        <member name="M:DatabaseWrapper.Core.DatabaseClientBase.Count(System.String,ExpressionTree.Expr)">
            <summary>
            Determine the number of records that exist by filter.
            </summary>
            <param name="tableName">The name of the table.</param>
            <param name="filter">Expression.</param>
            <returns>The number of records.</returns>
        </member>
        <member name="M:DatabaseWrapper.Core.DatabaseClientBase.CountAsync(System.String,ExpressionTree.Expr,System.Threading.CancellationToken)">
            <summary>
            Determine the number of records that exist by filter.
            </summary>
            <param name="tableName">The name of the table.</param>
            <param name="filter">Expression.</param>
            <param name="token">Cancellation token.</param>
            <returns>The number of records.</returns>
        </member>
        <member name="M:DatabaseWrapper.Core.DatabaseClientBase.Sum(System.String,System.String,ExpressionTree.Expr)">
            <summary>
            Determine the sum of a column for records that match the supplied filter.
            </summary>
            <param name="tableName">The name of the table.</param>
            <param name="fieldName">The name of the field.</param>
            <param name="filter">Expression.</param>
            <returns>The sum of the specified column from the matching rows.</returns>
        </member>
        <member name="M:DatabaseWrapper.Core.DatabaseClientBase.SumAsync(System.String,System.String,ExpressionTree.Expr,System.Threading.CancellationToken)">
            <summary>
            Determine the sum of a column for records that match the supplied filter.
            </summary>
            <param name="tableName">The name of the table.</param>
            <param name="fieldName">The name of the field.</param>
            <param name="filter">Expression.</param>
            <param name="token">Cancellation token.</param>
            <returns>The sum of the specified column from the matching rows.</returns>
        </member>
        <member name="M:DatabaseWrapper.Core.DatabaseClientBase.Timestamp(System.DateTime)">
            <summary>
            Create a string timestamp from the given DateTime.
            </summary>
            <param name="ts">DateTime.</param>
            <returns>A string with formatted timestamp.</returns>
        </member>
        <member name="M:DatabaseWrapper.Core.DatabaseClientBase.TimestampOffset(System.DateTimeOffset)">
            <summary>
            Create a string timestamp with offset from the given DateTimeOffset.
            </summary>
            <param name="ts">DateTimeOffset.</param>
            <returns>A string with formatted timestamp.</returns>
        </member>
        <member name="M:DatabaseWrapper.Core.DatabaseClientBase.SanitizeString(System.String)">
            <summary>
            Sanitize an input string.
            </summary>
            <param name="s">The value to sanitize.</param>
            <returns>A sanitized string.</returns>
        </member>
        <member name="T:DatabaseWrapper.Core.DatabaseHelperBase">
            <summary>
            Base implementation of helper properties and methods.
            </summary>
        </member>
        <member name="F:DatabaseWrapper.Core.DatabaseHelperBase.TimestampFormat">
            <summary>
            Timestamp format for use in DateTime.ToString([format]).
            </summary>
        </member>
        <member name="F:DatabaseWrapper.Core.DatabaseHelperBase.TimestampOffsetFormat">
            <summary>
            Timestamp offset format for use in DateTimeOffset.ToString([format]).
            </summary>
        </member>
        <member name="M:DatabaseWrapper.Core.DatabaseHelperBase.AppendParameter(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Object)">
             <summary>
             Append object as the parameter to the parameters list.
            
             Returns the parameter name, that is to be used in the query currently under construction.
             </summary>
             <param name="parameters">List of the parameters.</param>
             <param name="o">Object to be added.</param>
             <returns>Parameter name.</returns>
        </member>
        <member name="M:DatabaseWrapper.Core.DatabaseHelperBase.AppendParameterByType(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Object)">
             <summary>
             Append object as the parameter to the parameters list.
             Use the object type to apply conversions, if any needed.
            
             Returns the parameter name, that is to be used in the query currently under construction.
             </summary>
             <param name="parameters">List of the parameters.</param>
             <param name="untypedObject">Object to be added.</param>
             <returns>Parameter name.</returns>
        </member>
        <member name="M:DatabaseWrapper.Core.DatabaseHelperBase.ExpressionToWhereClause(ExpressionTree.Expr,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Compose a where-cluase corresponding to the tree expression.
            </summary>
            <param name="expr">Expression to be converted.</param>
            <param name="parameters">Parameters to append SQL query parameters to.</param>
            <returns>Where-clause.</returns>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ApplicationException"></exception>
        </member>
        <member name="M:DatabaseWrapper.Core.DatabaseHelperBase.AddParameters``2(``0,System.Func{System.String,System.Data.SqlDbType,``1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Add parameters to the SQL command.
            </summary>
            <typeparam name="TC">Subtype of DbCommand</typeparam>
            <typeparam name="TP">Subtype of DbPaameter</typeparam>
            <param name="cmd">Command to add parameters to.</param>
            <param name="createParameter">Parameter constructor.</param>
            <param name="parameters">Parameters to be added.</param>
            <exception cref="T:System.ApplicationException"></exception>
        </member>
        <member name="M:DatabaseWrapper.Core.DatabaseHelperBase.GenerateConnectionString(DatabaseWrapper.Core.DatabaseSettings)">
            <summary>
            Build a connection string from DatabaseSettings.
            </summary>
            <param name="settings">Settings.</param>
            <returns>String.</returns>
        </member>
        <member name="M:DatabaseWrapper.Core.DatabaseHelperBase.RetrieveTableNamesQuery(System.String)">
            <summary>
            Query to retrieve the names of tables from a database.
            </summary>
            <param name="database">Database name.</param>
            <returns>String.</returns>
        </member>
        <member name="M:DatabaseWrapper.Core.DatabaseHelperBase.RetrieveTableColumnsQuery(System.String,System.String)">
            <summary>
            Query to retrieve the list of columns for a table.
            </summary>
            <param name="database">Database name.</param>
            <param name="table">Table name.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseWrapper.Core.DatabaseHelperBase.SanitizeString(System.String)">
            <summary>
            Method to sanitize a string.
            </summary>
            <param name="val">String.</param>
            <returns>String.</returns>
        </member>
        <member name="M:DatabaseWrapper.Core.DatabaseHelperBase.PreparedFieldName(System.String)">
            <summary>
            Prepare a field name for use in a SQL query.
            </summary>
            <param name="fieldName">Name of the field to be prepared.</param>
            <returns>Field name for use in a SQL query.</returns>
        </member>
        <member name="M:DatabaseWrapper.Core.DatabaseHelperBase.ColumnToCreateQuery(DatabaseWrapper.Core.Column)">
            <summary>
            Method to convert a Column object to the values used in a table create statement.
            </summary>
            <param name="col">Column.</param>
            <returns>String.</returns>
        </member>
        <member name="M:DatabaseWrapper.Core.DatabaseHelperBase.GetPrimaryKeyColumn(System.Collections.Generic.List{DatabaseWrapper.Core.Column})">
            <summary>
            Retrieve the primary key column from a list of columns.
            </summary>
            <param name="columns">List of Column.</param>
            <returns>Column.</returns>
        </member>
        <member name="M:DatabaseWrapper.Core.DatabaseHelperBase.CreateTableQuery(System.String,System.Collections.Generic.List{DatabaseWrapper.Core.Column})">
            <summary>
            Retrieve a query used for table creation.
            </summary>
            <param name="tableName">Table name.</param>
            <param name="columns">List of columns.</param>
            <returns>String.</returns>
        </member>
        <member name="M:DatabaseWrapper.Core.DatabaseHelperBase.DropTableQuery(System.String)">
            <summary>
            Retrieve a query used for dropping a table.
            </summary>
            <param name="tableName">Table name.</param>
            <returns>String.</returns>
        </member>
        <member name="M:DatabaseWrapper.Core.DatabaseHelperBase.SelectQuery(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.List{System.String},ExpressionTree.Expr,DatabaseWrapper.Core.ResultOrder[])">
            <summary>
            Retrieve a query used for selecting data from a table.
            </summary>
            <param name="tableName">Table name.</param>
            <param name="indexStart">Index start.</param>
            <param name="maxResults">Maximum number of results to retrieve.</param>
            <param name="returnFields">List of field names to return.</param>
            <param name="filter">Expression filter.</param>
            <param name="resultOrder">Result order.</param>
            <returns>String.</returns>
        </member>
        <member name="M:DatabaseWrapper.Core.DatabaseHelperBase.InsertQuery(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Retrieve a query used for inserting data into a table.
            </summary>
            <param name="tableName">The table in which you wish to INSERT.</param>
            <param name="keyValuePairs">The key-value pairs for the row you wish to INSERT.</param>
            <returns>String.</returns>
        </member>
        <member name="M:DatabaseWrapper.Core.DatabaseHelperBase.InsertMultipleQuery(System.String,System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            Retrieve a query for inserting multiple rows into a table.
            </summary>
            <param name="tableName">The table in which you wish to INSERT.</param>
            <param name="keyValuePairList">List of dictionaries containing key-value pairs for the rows you wish to INSERT.</param>
            <returns>String.</returns>
        </member>
        <member name="M:DatabaseWrapper.Core.DatabaseHelperBase.UpdateQuery(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},ExpressionTree.Expr)">
            <summary>
            Retrieve a query for updating data in a table.
            </summary>
            <param name="tableName">The table in which you wish to UPDATE.</param>
            <param name="keyValuePairs">The key-value pairs for the data you wish to UPDATE.</param>
            <param name="filter">The expression containing the UPDATE filter (i.e. WHERE clause data).</param>
            <returns>String.</returns>
        </member>
        <member name="M:DatabaseWrapper.Core.DatabaseHelperBase.DeleteQuery(System.String,ExpressionTree.Expr)">
            <summary>
            Retrieve a query for deleting data from a table.
            </summary>
            <param name="tableName">Table name.</param>
            <param name="filter">Expression filter.</param>
            <returns>String.</returns>
        </member>
        <member name="M:DatabaseWrapper.Core.DatabaseHelperBase.TruncateQuery(System.String)">
            <summary>
            Retrieve a query for truncating a table.
            </summary>
            <param name="tableName">Table name.</param>
            <returns>String.</returns>
        </member>
        <member name="M:DatabaseWrapper.Core.DatabaseHelperBase.ExistsQuery(System.String,ExpressionTree.Expr)">
            <summary>
            Retrieve a query for determing whether data matching specified conditions exists.
            </summary>
            <param name="tableName">Table name.</param>
            <param name="filter">Expression filter.</param>
            <returns>String.</returns>
        </member>
        <member name="M:DatabaseWrapper.Core.DatabaseHelperBase.CountQuery(System.String,System.String,ExpressionTree.Expr)">
            <summary>
            Retrieve a query that returns a count of the number of rows matching the supplied conditions.
            </summary>
            <param name="tableName">Table name.</param>
            <param name="countColumnName">Column name to use to temporarily store the result.</param>
            <param name="filter">Expression filter.</param>
            <returns>String.</returns>
        </member>
        <member name="M:DatabaseWrapper.Core.DatabaseHelperBase.SumQuery(System.String,System.String,System.String,ExpressionTree.Expr)">
            <summary>
            Retrieve a query that sums the values found in the specified field.
            </summary>
            <param name="tableName">Table name.</param>
            <param name="fieldName">Column containing values to sum.</param>
            <param name="sumColumnName">Column name to temporarily store the result.</param>
            <param name="filter">Expression filter.</param>
            <returns>String.</returns>
        </member>
        <member name="M:DatabaseWrapper.Core.DatabaseHelperBase.GenerateTimestamp(System.DateTime)">
            <summary>
            Retrieve a timestamp in the database format.
            </summary>
            <param name="ts">DateTime.</param>
            <returns>String.</returns>
        </member>
        <member name="M:DatabaseWrapper.Core.DatabaseHelperBase.GenerateTimestampOffset(System.DateTimeOffset)">
            <summary>
            Retrieve a timestamp offset in the database format.
            </summary>
            <param name="ts">DateTimeOffset.</param>
            <returns>String.</returns>
        </member>
        <member name="T:DatabaseWrapper.Core.DatabaseQueryEvent">
            <summary>
            Database query event arguments.
            </summary>
        </member>
        <member name="P:DatabaseWrapper.Core.DatabaseQueryEvent.Query">
            <summary>
            Query.
            </summary>
        </member>
        <member name="P:DatabaseWrapper.Core.DatabaseQueryEvent.TotalMilliseconds">
            <summary>
            Total runtime in milliseconds.
            </summary>
        </member>
        <member name="P:DatabaseWrapper.Core.DatabaseQueryEvent.Result">
            <summary>
            Result.
            </summary>
        </member>
        <member name="P:DatabaseWrapper.Core.DatabaseQueryEvent.RowsReturned">
            <summary>
            Number of rows returned.
            </summary>
        </member>
        <member name="P:DatabaseWrapper.Core.DatabaseQueryEvent.Exception">
            <summary>
            Exception, if any.
            </summary>
        </member>
        <member name="M:DatabaseWrapper.Core.DatabaseQueryEvent.#ctor(System.String,System.Double,System.Data.DataTable,System.Exception)">
            <summary>
            Instantiate.
            </summary>
            <param name="query">Query.</param>
            <param name="totalMs">Total runtime in milliseconds.</param>
            <param name="result">Result.</param>
            <param name="ex">Exception, if any.</param>
        </member>
        <member name="T:DatabaseWrapper.Core.DatabaseSettings">
            <summary>
            Database settings.
            </summary>
        </member>
        <member name="P:DatabaseWrapper.Core.DatabaseSettings.Filename">
            <summary>
            Filename, if using Sqlite.
            </summary>
        </member>
        <member name="P:DatabaseWrapper.Core.DatabaseSettings.Type">
            <summary>
            The type of database.
            </summary>
        </member>
        <member name="P:DatabaseWrapper.Core.DatabaseSettings.Hostname">
            <summary>
            The hostname of the database server.
            </summary>
        </member>
        <member name="P:DatabaseWrapper.Core.DatabaseSettings.Port">
            <summary>
            The TCP port number on which the server is listening.
            </summary>
        </member>
        <member name="P:DatabaseWrapper.Core.DatabaseSettings.Username">
            <summary>
            The username to use when accessing the database.
            </summary>
        </member>
        <member name="P:DatabaseWrapper.Core.DatabaseSettings.Password">
            <summary>
            The password to use when accessing the database.
            </summary>
        </member>
        <member name="P:DatabaseWrapper.Core.DatabaseSettings.Instance">
            <summary>
            For SQL Server Express, the instance name.
            </summary>
        </member>
        <member name="P:DatabaseWrapper.Core.DatabaseSettings.DatabaseName">
            <summary>
            The name of the database.
            </summary>
        </member>
        <member name="P:DatabaseWrapper.Core.DatabaseSettings.Debug">
            <summary>
            Debug settings.
            </summary>
        </member>
        <member name="M:DatabaseWrapper.Core.DatabaseSettings.#ctor">
            <summary>
            Instantiate the object.
            </summary>
        </member>
        <member name="M:DatabaseWrapper.Core.DatabaseSettings.#ctor(System.String)">
            <summary>
            Instantiate the object using Sqlite.
            </summary>
            <param name="filename">The Sqlite database filename.</param>
        </member>
        <member name="M:DatabaseWrapper.Core.DatabaseSettings.#ctor(System.String,System.String,System.Int32,System.String,System.String,System.String)">
            <summary>
            Instantiate the object using SQL Server, MySQL, or PostgreSQL.
            </summary>
            <param name="dbType">The type of database.</param>
            <param name="hostname">The hostname of the database server.</param>
            <param name="port">The TCP port number on which the server is listening.</param>
            <param name="username">The username to use when accessing the database.</param>
            <param name="password">The password to use when accessing the database.</param> 
            <param name="dbName">The name of the database.</param>
        </member>
        <member name="M:DatabaseWrapper.Core.DatabaseSettings.#ctor(DatabaseWrapper.Core.DbTypeEnum,System.String,System.Int32,System.String,System.String,System.String)">
            <summary>
            Instantiate the object using SQL Server, MySQL, or PostgreSQL.
            </summary>
            <param name="dbType">The type of database.</param>
            <param name="hostname">The hostname of the database server.</param>
            <param name="port">The TCP port number on which the server is listening.</param>
            <param name="username">The username to use when accessing the database.</param>
            <param name="password">The password to use when accessing the database.</param> 
            <param name="dbName">The name of the database.</param>
        </member>
        <member name="M:DatabaseWrapper.Core.DatabaseSettings.#ctor(System.String,System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            Instantiate the object for SQL Server Express.
            </summary> 
            <param name="hostname">The hostname of the database server.</param>
            <param name="port">The TCP port number on which the server is listening.</param>
            <param name="username">The username to use when accessing the database.</param>
            <param name="password">The password to use when accessing the database.</param>
            <param name="instance">For SQL Server Express, the instance name.</param>
            <param name="dbName">The name of the database.</param>
        </member>
        <member name="T:DatabaseWrapper.Core.DatabaseSettings.DebugSettings">
            <summary>
            Debug settings.
            </summary>
        </member>
        <member name="P:DatabaseWrapper.Core.DatabaseSettings.DebugSettings.EnableForQueries">
            <summary>
            Enable debugging for queries.
            </summary>
        </member>
        <member name="P:DatabaseWrapper.Core.DatabaseSettings.DebugSettings.EnableForResults">
            <summary>
            Enable debugging for results.
            </summary>
        </member>
        <member name="P:DatabaseWrapper.Core.DatabaseSettings.DebugSettings.Logger">
            <summary>
            Action to invoke when sending a debug message.
            </summary>
        </member>
        <member name="M:DatabaseWrapper.Core.DatabaseSettings.DebugSettings.#ctor">
            <summary>
            Instantiate.
            </summary>
        </member>
        <member name="T:DatabaseWrapper.Core.DataTypeEnum">
            <summary>
            Type of data contained in the column.
            </summary>
        </member>
        <member name="F:DatabaseWrapper.Core.DataTypeEnum.Varchar">
            <summary>
            Variable-length character.
            </summary>
        </member>
        <member name="F:DatabaseWrapper.Core.DataTypeEnum.Nvarchar">
            <summary>
            Variable-length unicode character.
            </summary>
        </member>
        <member name="F:DatabaseWrapper.Core.DataTypeEnum.TinyInt">
            <summary>
            Tiny integer.
            </summary>
        </member>
        <member name="F:DatabaseWrapper.Core.DataTypeEnum.Int">
            <summary>
            Integer.
            </summary>
        </member>
        <member name="F:DatabaseWrapper.Core.DataTypeEnum.Long">
            <summary>
            Long
            </summary>
        </member>
        <member name="F:DatabaseWrapper.Core.DataTypeEnum.Decimal">
            <summary>
            Decimal
            </summary>
        </member>
        <member name="F:DatabaseWrapper.Core.DataTypeEnum.Double">
            <summary>
            Double
            </summary>
        </member>
        <member name="F:DatabaseWrapper.Core.DataTypeEnum.DateTime">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="F:DatabaseWrapper.Core.DataTypeEnum.DateTimeOffset">
            <summary>
            Timestamp with offset.
            </summary>
        </member>
        <member name="F:DatabaseWrapper.Core.DataTypeEnum.Blob">
            <summary>
            Blob
            </summary>
        </member>
        <member name="F:DatabaseWrapper.Core.DataTypeEnum.Guid">
            <summary>
            GUID.
            </summary>
        </member>
        <member name="F:DatabaseWrapper.Core.DataTypeEnum.Boolean">
            <summary>
            Boolean.
            </summary>
        </member>
        <member name="F:DatabaseWrapper.Core.DataTypeEnum.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="T:DatabaseWrapper.Core.DbTypeEnum">
            <summary>
            Enumeration containing the supported database types.
            </summary>
        </member>
        <member name="F:DatabaseWrapper.Core.DbTypeEnum.SqlServer">
            <summary>
            Microsoft SQL Server
            </summary>
        </member>
        <member name="F:DatabaseWrapper.Core.DbTypeEnum.Mysql">
            <summary>
            MySQL
            </summary>
        </member>
        <member name="F:DatabaseWrapper.Core.DbTypeEnum.Postgresql">
            <summary>
            PostgreSQL
            </summary>
        </member>
        <member name="F:DatabaseWrapper.Core.DbTypeEnum.Sqlite">
            <summary>
            Sqlite
            </summary>
        </member>
        <member name="T:DatabaseWrapper.Core.Helper">
            <summary>
            Static helper methods for DatabaseWrapper.
            </summary>
        </member>
        <member name="M:DatabaseWrapper.Core.Helper.IsList(System.Object)">
            <summary>
            Determines if an object is of a List type.
            </summary>
            <param name="o">Object.</param>
            <returns>True if the object is of a List type.</returns>
        </member>
        <member name="M:DatabaseWrapper.Core.Helper.ObjectToList(System.Object)">
            <summary>
            Convert an object to a List object.
            </summary>
            <param name="obj">Object.</param>
            <returns>List object.</returns>
        </member>
        <member name="M:DatabaseWrapper.Core.Helper.DataTableIsNullOrEmpty(System.Data.DataTable)">
            <summary>
            Determine if a DataTable is null or has no rows.
            </summary>
            <param name="table">DataTable.</param>
            <returns>True if DataTable is null or has no rows.</returns>
        </member>
        <member name="M:DatabaseWrapper.Core.Helper.DataTableToObject``1(System.Data.DataTable)">
            <summary>
            Convert a DataTable to an object.
            </summary>
            <typeparam name="T">Type of object.</typeparam>
            <param name="table">DataTable.</param>
            <returns>Object of specified type.</returns>
        </member>
        <member name="M:DatabaseWrapper.Core.Helper.DataRowToObject``1(System.Data.DataRow)">
            <summary>
            Convert a DataRow to an object.
            </summary>
            <typeparam name="T">Type of object.</typeparam>
            <param name="row">DataRow.</param>
            <returns>Object of specified type.</returns>
        </member>
        <member name="M:DatabaseWrapper.Core.Helper.DataTableToListDynamic(System.Data.DataTable)">
            <summary>
            Convert a DataTable to a List of dynamic objects.
            </summary>
            <param name="table">DataTable.</param>
            <returns>List of dynamic objects.</returns>
        </member>
        <member name="M:DatabaseWrapper.Core.Helper.DataTableToDynamic(System.Data.DataTable)">
            <summary>
            Convert a DataTable to a dynamic object.
            </summary>
            <param name="table">DataTable.</param>
            <returns>Dynamic object.</returns>
        </member>
        <member name="M:DatabaseWrapper.Core.Helper.DataTableToListDictionary(System.Data.DataTable)">
            <summary>
            Convert a DataTable to a List Dictionary.
            </summary>
            <param name="table">DataTable.</param>
            <returns>List Dictionary.</returns>
        </member>
        <member name="M:DatabaseWrapper.Core.Helper.DataTableToDictionary(System.Data.DataTable)">
            <summary>
            Convert a DataTable to a Dictionary.
            </summary>
            <param name="table">DataTable.</param>
            <returns>Dictionary.</returns>
        </member>
        <member name="M:DatabaseWrapper.Core.Helper.IsExtendedCharacters(System.String)">
            <summary>
            Determine if string contains extended characters.
            </summary>
            <param name="data">String.</param>
            <returns>True if string contains extended characters.</returns>
        </member>
        <member name="M:DatabaseWrapper.Core.Helper.DataTypeFromString(System.String)">
            <summary>
            Retrieve the DataType from the column type.
            </summary>
            <param name="s">String containing column type.</param>
            <returns>DataTypeEnum.</returns>
        </member>
        <member name="M:DatabaseWrapper.Core.Helper.ByteArrayToHexString(System.Byte[])">
            <summary>
            Convert byte array to hex string.
            </summary>
            <param name="bytes">Byte array.</param>
            <returns>Hex string.</returns>
        </member>
        <member name="M:DatabaseWrapper.Core.Helper.HexStringToBytes(System.String)">
            <summary>
            Convert hex string to byte array.
            </summary>
            <param name="hex">Hex string.</param>
            <returns>Byte array.</returns>
        </member>
        <member name="T:DatabaseWrapper.Core.OrderDirectionEnum">
            <summary>
            Direction by which results should be returned.
            </summary>
        </member>
        <member name="F:DatabaseWrapper.Core.OrderDirectionEnum.Ascending">
            <summary>
            Return results in ascending order.
            </summary>
        </member>
        <member name="F:DatabaseWrapper.Core.OrderDirectionEnum.Descending">
            <summary>
            Return results in descending order.
            </summary>
        </member>
        <member name="T:DatabaseWrapper.Core.ResultOrder">
            <summary>
            Describe on which columns and in which direction results should be ordered.
            </summary>
        </member>
        <member name="P:DatabaseWrapper.Core.ResultOrder.ColumnName">
            <summary>
            Column name on which to order results.
            </summary>
        </member>
        <member name="P:DatabaseWrapper.Core.ResultOrder.Direction">
            <summary>
            Direction by which results should be returned.
            </summary>
        </member>
        <member name="M:DatabaseWrapper.Core.ResultOrder.#ctor">
            <summary>
            Instantiate the object.
            </summary>
        </member>
        <member name="M:DatabaseWrapper.Core.ResultOrder.#ctor(System.String,DatabaseWrapper.Core.OrderDirectionEnum)">
            <summary>
            Instantiate the object.
            </summary>
            <param name="columnName">Column name on which to order results.</param>
            <param name="direction">Direction by which results should be returned.</param>
        </member>
    </members>
</doc>
