<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DatabaseWrapper.Sqlite</name>
    </assembly>
    <members>
        <member name="T:DatabaseWrapper.Sqlite.DatabaseClient">
            <summary>
            Database client for Sqlite.
            </summary>
        </member>
        <member name="P:DatabaseWrapper.Sqlite.DatabaseClient.ConnectionString">
            <summary>
            The connection string used to connect to the database.
            </summary>
        </member>
        <member name="P:DatabaseWrapper.Sqlite.DatabaseClient.TimestampFormat">
            <summary>
            Timestamp format.
            Default is yyyy-MM-dd HH:mm:ss.ffffff.
            </summary>
        </member>
        <member name="P:DatabaseWrapper.Sqlite.DatabaseClient.TimestampOffsetFormat">
            <summary>
            Timestamp format with offset.
            Default is MM/dd/yyyy hh:mm:ss.fffffff zzz.
            </summary>
        </member>
        <member name="P:DatabaseWrapper.Sqlite.DatabaseClient.MaxStatementLength">
            <summary>
            Maximum supported statement length.
            </summary>
        </member>
        <member name="P:DatabaseWrapper.Sqlite.DatabaseClient.Settings">
            <summary>
            Database settings.
            </summary>
        </member>
        <member name="E:DatabaseWrapper.Sqlite.DatabaseClient.QueryEvent">
            <summary>
            Event to fire when a query is handled.
            </summary>
        </member>
        <member name="M:DatabaseWrapper.Sqlite.DatabaseClient.#ctor(DatabaseWrapper.Core.DatabaseSettings)">
            <summary>
            Create an instance of the database client.
            </summary>
            <param name="settings">Database settings.</param>
        </member>
        <member name="M:DatabaseWrapper.Sqlite.DatabaseClient.#ctor(System.String)">
            <summary>
            Create an instance of the database client.
            </summary>
            <param name="filename">Sqlite database filename.</param>
        </member>
        <member name="M:DatabaseWrapper.Sqlite.DatabaseClient.Dispose">
            <summary>
            Tear down the client and dispose of resources.
            </summary>
        </member>
        <member name="M:DatabaseWrapper.Sqlite.DatabaseClient.ListTables">
            <summary>
            List all tables in the database.
            </summary>
            <returns>List of strings, each being a table name.</returns>
        </member>
        <member name="M:DatabaseWrapper.Sqlite.DatabaseClient.ListTablesAsync(System.Threading.CancellationToken)">
            <summary>
            List all tables in the database.
            </summary>
            <param name="token">Cancellation token.</param>
            <returns>List of strings, each being a table name.</returns>
        </member>
        <member name="M:DatabaseWrapper.Sqlite.DatabaseClient.TableExists(System.String)">
            <summary>
            Check if a table exists in the database.
            </summary>
            <param name="tableName">The name of the table.</param>
            <returns>True if exists.</returns>
        </member>
        <member name="M:DatabaseWrapper.Sqlite.DatabaseClient.TableExistsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Check if a table exists in the database.
            </summary>
            <param name="tableName">The name of the table.</param>
            <param name="token">Cancellation token.</param>
            <returns>True if exists.</returns>
        </member>
        <member name="M:DatabaseWrapper.Sqlite.DatabaseClient.DescribeTable(System.String)">
            <summary>
            Show the columns and column metadata from a specific table.
            </summary>
            <param name="tableName">The table to view.</param>
            <returns>A list of column objects.</returns>
        </member>
        <member name="M:DatabaseWrapper.Sqlite.DatabaseClient.DescribeTableAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Show the columns and column metadata from a specific table.
            </summary>
            <param name="tableName">The table to view.</param>
            <param name="token">Cancellation token.</param>
            <returns>A list of column objects.</returns>
        </member>
        <member name="M:DatabaseWrapper.Sqlite.DatabaseClient.DescribeDatabase">
            <summary>
            Describe each of the tables in the database.
            </summary>
            <returns>Dictionary where Key is table name, value is List of Column objects.</returns>
        </member>
        <member name="M:DatabaseWrapper.Sqlite.DatabaseClient.DescribeDatabaseAsync(System.Threading.CancellationToken)">
            <summary>
            Describe each of the tables in the database.
            </summary>
            <param name="token">Cancellation token.</param>
            <returns>Dictionary where Key is table name, value is List of Column objects.</returns>
        </member>
        <member name="M:DatabaseWrapper.Sqlite.DatabaseClient.CreateTable(System.String,System.Collections.Generic.List{DatabaseWrapper.Core.Column})">
            <summary>
            Create a table with a specified name.
            </summary>
            <param name="tableName">The name of the table.</param>
            <param name="columns">Columns.</param>
        </member>
        <member name="M:DatabaseWrapper.Sqlite.DatabaseClient.CreateTableAsync(System.String,System.Collections.Generic.List{DatabaseWrapper.Core.Column},System.Threading.CancellationToken)">
            <summary>
            Create a table with a specified name.
            </summary>
            <param name="tableName">The name of the table.</param>
            <param name="columns">Columns.</param>
            <param name="token">Cancellation token.</param>
        </member>
        <member name="M:DatabaseWrapper.Sqlite.DatabaseClient.DropTable(System.String)">
            <summary>
            Drop the specified table.  
            </summary>
            <param name="tableName">The table to drop.</param>
        </member>
        <member name="M:DatabaseWrapper.Sqlite.DatabaseClient.DropTableAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Drop the specified table.  
            </summary>
            <param name="tableName">The table to drop.</param>
            <param name="token">Cancellation token.</param>
        </member>
        <member name="M:DatabaseWrapper.Sqlite.DatabaseClient.GetPrimaryKeyColumn(System.String)">
            <summary>
            Retrieve the name of the primary key column from a specific table.
            </summary>
            <param name="tableName">The table of which you want the primary key.</param>
            <returns>A string containing the column name.</returns>
        </member>
        <member name="M:DatabaseWrapper.Sqlite.DatabaseClient.GetColumnNames(System.String)">
            <summary>
            Retrieve a list of the names of columns from within a specific table.
            </summary>
            <param name="tableName">The table of which ou want to retrieve the list of columns.</param>
            <returns>A list of strings containing the column names.</returns>
        </member>
        <member name="M:DatabaseWrapper.Sqlite.DatabaseClient.GetUniqueObjectById(System.String,System.String,System.Object)">
            <summary>
            Returns a DataTable containing at most one row with data from the specified table where the specified column contains the specified value.  Should only be used on key or unique fields.
            </summary>
            <param name="tableName">The table from which you wish to SELECT.</param>
            <param name="columnName">The column containing key or unique fields where a match is desired.</param>
            <param name="value">The value to match in the key or unique field column.  This should be an object that can be cast to a string value.</param>
            <returns>A DataTable containing at most one row.</returns>
        </member>
        <member name="M:DatabaseWrapper.Sqlite.DatabaseClient.GetUniqueObjectByIdAsync(System.String,System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Returns a DataTable containing at most one row with data from the specified table where the specified column contains the specified value.  Should only be used on key or unique fields.
            </summary>
            <param name="tableName">The table from which you wish to SELECT.</param>
            <param name="columnName">The column containing key or unique fields where a match is desired.</param>
            <param name="value">The value to match in the key or unique field column.  This should be an object that can be cast to a string value.</param>
            <param name="token">Cancellation token.</param>
            <returns>A DataTable containing at most one row.</returns>
        </member>
        <member name="M:DatabaseWrapper.Sqlite.DatabaseClient.Select(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.List{System.String},ExpressionTree.Expr)">
            <summary>
            Execute a SELECT query.
            </summary>
            <param name="tableName">The table from which you wish to SELECT.</param>
            <param name="indexStart">The starting index for retrieval.</param>
            <param name="maxResults">The maximum number of results to retrieve.</param>
            <param name="returnFields">The fields you wish to have returned.  Null returns all.</param>
            <param name="filter">The expression containing the SELECT filter (i.e. WHERE clause data).</param>
            <returns>A DataTable containing the results.</returns>
        </member>
        <member name="M:DatabaseWrapper.Sqlite.DatabaseClient.SelectAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.List{System.String},ExpressionTree.Expr,System.Threading.CancellationToken)">
            <summary>
            Execute a SELECT query.
            </summary>
            <param name="tableName">The table from which you wish to SELECT.</param>
            <param name="indexStart">The starting index for retrieval.</param>
            <param name="maxResults">The maximum number of results to retrieve.</param>
            <param name="returnFields">The fields you wish to have returned.  Null returns all.</param>
            <param name="filter">The expression containing the SELECT filter (i.e. WHERE clause data).</param>
            <param name="token">Cancellation token.</param>
            <returns>A DataTable containing the results.</returns>
        </member>
        <member name="M:DatabaseWrapper.Sqlite.DatabaseClient.Select(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.List{System.String},ExpressionTree.Expr,DatabaseWrapper.Core.ResultOrder[])">
            <summary>
            Execute a SELECT query.
            </summary>
            <param name="tableName">The table from which you wish to SELECT.</param>
            <param name="indexStart">The starting index for retrieval.</param>
            <param name="maxResults">The maximum number of results to retrieve.</param>
            <param name="returnFields">The fields you wish to have returned.  Null returns all.</param>
            <param name="filter">The expression containing the SELECT filter (i.e. WHERE clause data).</param>
            <param name="resultOrder">Specify on which columns and in which direction results should be ordered.</param>
            <returns>A DataTable containing the results.</returns>
        </member>
        <member name="M:DatabaseWrapper.Sqlite.DatabaseClient.SelectAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.List{System.String},ExpressionTree.Expr,DatabaseWrapper.Core.ResultOrder[],System.Threading.CancellationToken)">
            <summary>
            Execute a SELECT query.
            </summary>
            <param name="tableName">The table from which you wish to SELECT.</param>
            <param name="indexStart">The starting index for retrieval.</param>
            <param name="maxResults">The maximum number of results to retrieve.</param>
            <param name="returnFields">The fields you wish to have returned.  Null returns all.</param>
            <param name="filter">The expression containing the SELECT filter (i.e. WHERE clause data).</param>
            <param name="resultOrder">Specify on which columns and in which direction results should be ordered.</param>
            <param name="token">Cancellation token.</param>
            <returns>A DataTable containing the results.</returns>
        </member>
        <member name="M:DatabaseWrapper.Sqlite.DatabaseClient.Insert(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Execute an INSERT query.
            </summary>
            <param name="tableName">The table in which you wish to INSERT.</param>
            <param name="keyValuePairs">The key-value pairs for the row you wish to INSERT.</param>
            <returns>A DataTable containing the results.</returns>
        </member>
        <member name="M:DatabaseWrapper.Sqlite.DatabaseClient.InsertAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            Execute an INSERT query.
            </summary>
            <param name="tableName">The table in which you wish to INSERT.</param>
            <param name="keyValuePairs">The key-value pairs for the row you wish to INSERT.</param>
            <param name="token">Cancellation token.</param>
            <returns>A DataTable containing the results.</returns>
        </member>
        <member name="M:DatabaseWrapper.Sqlite.DatabaseClient.InsertMultiple(System.String,System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            Execute an INSERT query with multiple values within a transaction.
            </summary>
            <param name="tableName">The table in which you wish to INSERT.</param>
            <param name="keyValuePairList">List of dictionaries containing key-value pairs for the rows you wish to INSERT.</param>
        </member>
        <member name="M:DatabaseWrapper.Sqlite.DatabaseClient.InsertMultipleAsync(System.String,System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}},System.Threading.CancellationToken)">
            <summary>
            Execute an INSERT query with multiple values within a transaction.
            </summary>
            <param name="tableName">The table in which you wish to INSERT.</param>
            <param name="keyValuePairList">List of dictionaries containing key-value pairs for the rows you wish to INSERT.</param>
            <param name="token">Cancellation token.</param>
        </member>
        <member name="M:DatabaseWrapper.Sqlite.DatabaseClient.Update(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},ExpressionTree.Expr)">
            <summary>
            Execute an UPDATE query. 
            </summary>
            <param name="tableName">The table in which you wish to UPDATE.</param>
            <param name="keyValuePairs">The key-value pairs for the data you wish to UPDATE.</param>
            <param name="filter">The expression containing the UPDATE filter (i.e. WHERE clause data).</param> 
        </member>
        <member name="M:DatabaseWrapper.Sqlite.DatabaseClient.UpdateAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},ExpressionTree.Expr,System.Threading.CancellationToken)">
            <summary>
            Execute an UPDATE query. 
            </summary>
            <param name="tableName">The table in which you wish to UPDATE.</param>
            <param name="keyValuePairs">The key-value pairs for the data you wish to UPDATE.</param>
            <param name="filter">The expression containing the UPDATE filter (i.e. WHERE clause data).</param>
            <param name="token">Cancellation token.</param>
        </member>
        <member name="M:DatabaseWrapper.Sqlite.DatabaseClient.Delete(System.String,ExpressionTree.Expr)">
            <summary>
            Execute a DELETE query.
            </summary>
            <param name="tableName">The table in which you wish to DELETE.</param>
            <param name="filter">The expression containing the DELETE filter (i.e. WHERE clause data).</param> 
        </member>
        <member name="M:DatabaseWrapper.Sqlite.DatabaseClient.DeleteAsync(System.String,ExpressionTree.Expr,System.Threading.CancellationToken)">
            <summary>
            Execute a DELETE query.
            </summary>
            <param name="tableName">The table in which you wish to DELETE.</param>
            <param name="filter">The expression containing the DELETE filter (i.e. WHERE clause data).</param> 
            <param name="token">Cancellation token.</param>
        </member>
        <member name="M:DatabaseWrapper.Sqlite.DatabaseClient.Truncate(System.String)">
            <summary>
            Empties a table completely.
            </summary>
            <param name="tableName">The table you wish to TRUNCATE.</param>
        </member>
        <member name="M:DatabaseWrapper.Sqlite.DatabaseClient.TruncateAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Empties a table completely.
            </summary>
            <param name="tableName">The table you wish to TRUNCATE.</param>
            <param name="token">Cancellation token.</param>
        </member>
        <member name="M:DatabaseWrapper.Sqlite.DatabaseClient.Query(System.ValueTuple{System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}})">
            <summary>
            Execute a query.
            </summary>
            <param name="queryAndParameters">Database query defined outside of the database client, and, the corresponding parameters.</param>
            <returns>A DataTable containing the results.</returns>
        </member>
        <member name="M:DatabaseWrapper.Sqlite.DatabaseClient.QueryAsync(System.ValueTuple{System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}},System.Threading.CancellationToken)">
            <summary>
            Execute a query.
            </summary>
            <param name="queryAndParameters">Tuple of a database query defined outside of the database client and of query parameters</param>
            <param name="token">Cancellation token.</param>
            <returns>A DataTable containing the results.</returns>
        </member>
        <member name="M:DatabaseWrapper.Sqlite.DatabaseClient.Exists(System.String,ExpressionTree.Expr)">
            <summary>
            Determine if records exist by filter.
            </summary>
            <param name="tableName">The name of the table.</param>
            <param name="filter">Expression.</param>
            <returns>True if records exist.</returns>
        </member>
        <member name="M:DatabaseWrapper.Sqlite.DatabaseClient.ExistsAsync(System.String,ExpressionTree.Expr,System.Threading.CancellationToken)">
            <summary>
            Determine if records exist by filter.
            </summary>
            <param name="tableName">The name of the table.</param>
            <param name="filter">Expression.</param>
            <param name="token">Cancellation token.</param>
            <returns>True if records exist.</returns>
        </member>
        <member name="M:DatabaseWrapper.Sqlite.DatabaseClient.Count(System.String,ExpressionTree.Expr)">
            <summary>
            Determine the number of records that exist by filter.
            </summary>
            <param name="tableName">The name of the table.</param>
            <param name="filter">Expression.</param>
            <returns>The number of records.</returns>
        </member>
        <member name="M:DatabaseWrapper.Sqlite.DatabaseClient.CountAsync(System.String,ExpressionTree.Expr,System.Threading.CancellationToken)">
            <summary>
            Determine the number of records that exist by filter.
            </summary>
            <param name="tableName">The name of the table.</param>
            <param name="filter">Expression.</param>
            <param name="token">Cancellation token.</param>
            <returns>The number of records.</returns>
        </member>
        <member name="M:DatabaseWrapper.Sqlite.DatabaseClient.Sum(System.String,System.String,ExpressionTree.Expr)">
            <summary>
            Determine the sum of a column for records that match the supplied filter.
            </summary>
            <param name="tableName">The name of the table.</param>
            <param name="fieldName">The name of the field.</param>
            <param name="filter">Expression.</param>
            <returns>The sum of the specified column from the matching rows.</returns>
        </member>
        <member name="M:DatabaseWrapper.Sqlite.DatabaseClient.SumAsync(System.String,System.String,ExpressionTree.Expr,System.Threading.CancellationToken)">
            <summary>
            Determine the sum of a column for records that match the supplied filter.
            </summary>
            <param name="tableName">The name of the table.</param>
            <param name="fieldName">The name of the field.</param>
            <param name="filter">Expression.</param>
            <param name="token">Cancellation token.</param>
            <returns>The sum of the specified column from the matching rows.</returns>
        </member>
        <member name="M:DatabaseWrapper.Sqlite.DatabaseClient.Timestamp(System.DateTime)">
            <summary>
            Create a string timestamp from the given DateTime.
            </summary>
            <param name="ts">DateTime.</param>
            <returns>A string with formatted timestamp.</returns>
        </member>
        <member name="M:DatabaseWrapper.Sqlite.DatabaseClient.TimestampOffset(System.DateTimeOffset)">
            <summary>
            Create a string timestamp with offset from the given DateTimeOffset.
            </summary>
            <param name="ts">DateTimeOffset.</param>
            <returns>A string with formatted timestamp.</returns>
        </member>
        <member name="M:DatabaseWrapper.Sqlite.DatabaseClient.SanitizeString(System.String)">
            <summary>
            Sanitize an input string.
            </summary>
            <param name="s">The value to sanitize.</param>
            <returns>A sanitized string.</returns>
        </member>
        <member name="M:DatabaseWrapper.Sqlite.DatabaseClient.Dispose(System.Boolean)">
            <summary>
            Dispose of the object.
            </summary>
            <param name="disposing">Disposing of resources.</param>
        </member>
        <member name="T:DatabaseWrapper.Sqlite.SqliteHelper">
            <summary>
            Sqlite implementation of helper properties and methods.
            </summary>
        </member>
        <member name="P:DatabaseWrapper.Sqlite.SqliteHelper.TimestampFormat">
            <summary>
            Timestamp format for use in DateTime.ToString([format]).
            </summary>
        </member>
        <member name="P:DatabaseWrapper.Sqlite.SqliteHelper.TimestampOffsetFormat">
            <summary>
            Timestamp offset format for use in DateTimeOffset.ToString([format]).
            </summary>
        </member>
        <member name="M:DatabaseWrapper.Sqlite.SqliteHelper.GenerateConnectionString(DatabaseWrapper.Core.DatabaseSettings)">
            <summary>
            Build a connection string from DatabaseSettings.
            </summary>
            <param name="settings">Settings.</param>
            <returns>String.</returns>
        </member>
        <member name="M:DatabaseWrapper.Sqlite.SqliteHelper.RetrieveTableNamesQuery(System.String)">
            <summary>
            Query to retrieve the names of tables from a database.
            </summary>
            <param name="database">Database name.</param>
            <returns>String.</returns>
        </member>
        <member name="M:DatabaseWrapper.Sqlite.SqliteHelper.RetrieveTableColumnsQuery(System.String,System.String)">
            <summary>
            Query to retrieve the list of columns for a table.
            </summary>
            <param name="database">Database name.</param>
            <param name="table">Table name.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseWrapper.Sqlite.SqliteHelper.SanitizeString(System.String)">
            <summary>
            Method to sanitize a string.
            </summary>
            <param name="val">String.</param>
            <returns>String.</returns>
        </member>
        <member name="M:DatabaseWrapper.Sqlite.SqliteHelper.PreparedFieldName(System.String)">
            <summary>
            Prepare a field name for use in a SQL query by surrounding it with backticks.
            </summary>
            <param name="fieldName">Name of the field to be prepared.</param>
            <returns>Field name for use in a SQL query.</returns>
        </member>
        <member name="M:DatabaseWrapper.Sqlite.SqliteHelper.ColumnToCreateQuery(DatabaseWrapper.Core.Column)">
            <summary>
            Method to convert a Column object to the values used in a table create statement.
            </summary>
            <param name="col">Column.</param>
            <returns>String.</returns>
        </member>
        <member name="M:DatabaseWrapper.Sqlite.SqliteHelper.GetPrimaryKeyColumn(System.Collections.Generic.List{DatabaseWrapper.Core.Column})">
            <summary>
            Retrieve the primary key column from a list of columns.
            </summary>
            <param name="columns">List of Column.</param>
            <returns>Column.</returns>
        </member>
        <member name="M:DatabaseWrapper.Sqlite.SqliteHelper.CreateTableQuery(System.String,System.Collections.Generic.List{DatabaseWrapper.Core.Column})">
            <summary>
            Retrieve a query used for table creation.
            </summary>
            <param name="tableName">Table name.</param>
            <param name="columns">List of columns.</param>
            <returns>String.</returns>
        </member>
        <member name="M:DatabaseWrapper.Sqlite.SqliteHelper.DropTableQuery(System.String)">
            <summary>
            Retrieve a query used for dropping a table.
            </summary>
            <param name="tableName">Table name.</param>
            <returns>String.</returns>
        </member>
        <member name="M:DatabaseWrapper.Sqlite.SqliteHelper.SelectQuery(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.List{System.String},ExpressionTree.Expr,DatabaseWrapper.Core.ResultOrder[])">
            <summary>
            Retrieve a query used for selecting data from a table.
            </summary>
            <param name="tableName">Table name.</param>
            <param name="indexStart">Index start.</param>
            <param name="maxResults">Maximum number of results to retrieve.</param>
            <param name="returnFields">List of field names to return.</param>
            <param name="filter">Expression filter.</param>
            <param name="resultOrder">Result order.</param>
            <returns>String.</returns>
        </member>
        <member name="M:DatabaseWrapper.Sqlite.SqliteHelper.InsertQuery(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Retrieve a query used for inserting data into a table.
            </summary>
            <param name="tableName">The table in which you wish to INSERT.</param>
            <param name="keyValuePairs">The key-value pairs for the row you wish to INSERT.</param>
            <returns>String.</returns>
        </member>
        <member name="M:DatabaseWrapper.Sqlite.SqliteHelper.InsertMultipleQuery(System.String,System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            Retrieve a query for inserting multiple rows into a table.
            </summary>
            <param name="tableName">The table in which you wish to INSERT.</param>
            <param name="keyValuePairList">List of dictionaries containing key-value pairs for the rows you wish to INSERT.</param>
            <returns>String.</returns>
        </member>
        <member name="M:DatabaseWrapper.Sqlite.SqliteHelper.UpdateQuery(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},ExpressionTree.Expr)">
            <summary>
            Retrieve a query for updating data in a table.
            </summary>
            <param name="tableName">The table in which you wish to UPDATE.</param>
            <param name="keyValuePairs">The key-value pairs for the data you wish to UPDATE.</param>
            <param name="filter">The expression containing the UPDATE filter (i.e. WHERE clause data).</param>
            <returns>String.</returns>
        </member>
        <member name="M:DatabaseWrapper.Sqlite.SqliteHelper.DeleteQuery(System.String,ExpressionTree.Expr)">
            <summary>
            Retrieve a query for deleting data from a table.
            </summary>
            <param name="tableName">Table name.</param>
            <param name="filter">Expression filter.</param>
            <returns>String.</returns>
        </member>
        <member name="M:DatabaseWrapper.Sqlite.SqliteHelper.TruncateQuery(System.String)">
            <summary>
            Retrieve a query for truncating a table.
            </summary>
            <param name="tableName">Table name.</param>
            <returns>String.</returns>
        </member>
        <member name="M:DatabaseWrapper.Sqlite.SqliteHelper.ExistsQuery(System.String,ExpressionTree.Expr)">
            <summary>
            Retrieve a query for determing whether data matching specified conditions exists.
            </summary>
            <param name="tableName">Table name.</param>
            <param name="filter">Expression filter.</param>
            <returns>String.</returns>
        </member>
        <member name="M:DatabaseWrapper.Sqlite.SqliteHelper.CountQuery(System.String,System.String,ExpressionTree.Expr)">
            <summary>
            Retrieve a query that returns a count of the number of rows matching the supplied conditions.
            </summary>
            <param name="tableName">Table name.</param>
            <param name="countColumnName">Column name to use to temporarily store the result.</param>
            <param name="filter">Expression filter.</param>
            <returns>String.</returns>
        </member>
        <member name="M:DatabaseWrapper.Sqlite.SqliteHelper.SumQuery(System.String,System.String,System.String,ExpressionTree.Expr)">
            <summary>
            Retrieve a query that sums the values found in the specified field.
            </summary>
            <param name="tableName">Table name.</param>
            <param name="fieldName">Column containing values to sum.</param>
            <param name="sumColumnName">Column name to temporarily store the result.</param>
            <param name="filter">Expression filter.</param>
            <returns>String.</returns>
        </member>
        <member name="M:DatabaseWrapper.Sqlite.SqliteHelper.GenerateTimestamp(System.DateTime)">
            <summary>
            Retrieve a timestamp in the database format.
            </summary>
            <param name="ts">DateTime.</param>
            <returns>String.</returns>
        </member>
        <member name="M:DatabaseWrapper.Sqlite.SqliteHelper.GenerateTimestampOffset(System.DateTimeOffset)">
            <summary>
            Retrieve a timestamp offset in the database format.
            </summary>
            <param name="ts">DateTimeOffset.</param>
            <returns>String.</returns>
        </member>
    </members>
</doc>
